{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block main %}
    <div class="page-header content-box">
        <h1>Reodivsningstexter</h1>
    </div>

    <div class="report-container">
        <div id="kmom01" class="content-box report">
            <h2>kmom01</h2>
            <p>Jag gick nyss kursen Algoritmer och datastrukturer med objektorienterad Python. Jag hade lite erfarenhet med objektorienterad programmering innan det också, grunderna man fick lära sig den Python-kursen kan man säga.</p>
            <p>För att komma igång med klasser och objekt i Python så bör man först få klart sig vad en klass är. Hur man kan sätta attribut och skapa klasser med mera i en klass. Sedan hur man kan använda klasser för att skapa objekt av den klassen. Sedan kan man lära sig mer om till exempel arv, åtkomst och överskuggning.</p>
            <p>Jag förstår verkligen syftet med att använda till exempel Symfony för att sätta upp routes. Men jag kan tycka att det oftast blir onödigt krångligt och oklart hur man ska göra och vart allting ligger osv. Det tar tid att komma in i det men nu ska det nog gå snabbare i fortsättningen när man har fått det mesta klart för sig hur det fungerar. Nu när man inte har så mycket så känns det onödigt krångligt men när det är när det kommer mer som man ser uppsidan.</p>
            <p>Jag hade inte läst artikeln PHP The Right Way men gick in nu och kollade igenom några delar som såg intressanta ut. De jag kollade igenom var Shared servers, Errors, Password Hashing, Web Application Security och Object Caching. Jag lärde mig bland annat att PHP fortsätter köra vid ett error så länge inget extremt händer som tvingar det att krascha. Jag hade tidigare märkt av detta men jag visste inte att det var PHP i sig som fungerade så.</p>
            <p>Mitt TIL för detta moment är vad begreppet MVC betyder och hur man använder Symfony.</p>
        </div>

        <div id="kmom02"class="content-box report">
            <h2>kmom02</h2>
            <p>Gällande objektorientering i PHP så är arv när man skapar en klass som ärver en annan klass. Det betyder att den nya klassen ärver allting från den klassen den ärver från, vilket inkluderar till exempel egenskaper och metoder.  Sedan har man möjlighet att lägga till nya egenskaper och metoder, överskugga dem eller ta bort dem i den ärvande klassen. Komposition handlar om relationer mellan klasser. Det är komposition när en klass har en eller flera instanser av en annan klass. Till exempel så är det i detta moment komposition mellan klasserna Card och DeckOfCards då DeckOfCards har en egenskap som är en lista av Card-objekt. Interface är en struktur som sätter vilka metoder en klass måste implementera. Interface-strukturen skapar inte metoderna utan säger bara att dessa måste skapas när man skapar en klass med en implementation av den interfacen.  Man kan skapa en trait med en eller flera funktioner/metoder och sen använda sig av den traiten i en klass. Då finns de metoderna att använda sig av i klassen. Detta kan alltså användas då man villa använda sig av samma metoder i flera olika klasser.</p>
            <p>Jag gjorde övningsuppgiften som gick igenom hur man skapade spelet Pig med tärningar. Den gav en bra introduktion till objektorienterad programmering i PHP. Så när jag sen skulle lösa uppgiften så kollade jag på klassen Dice och när jag skapade Card och kollade på DiceHand när jag skapade CardHand. Sen kunde jag skapa klassen DeckOfCards. Jag valde att skapa kortleken genom en loop med 52 iterationer där jag i varje iteration med lite beräkningar byggde ihop ett Unicode-tecken och sen skapade ett Card-objekt som jag la till i listan med alla kort. Jag skapade en metod getCards() som returnerar alla kort. En metod draw() som tar en int som säger hur många kort som ska returneras och slumpar fram och tar bort de korten från leken sen returnerar dom. En metod shuffle() som blandar alla kort. En metod sort() som sorterar alla kort. En metod reset() som rensar kortleken och fyller den med alla 52 kort. Jag tycker jag löste det rätt bra tillslut. Gällande klasserna så är jag nöjd. Det finns såklart förbättringspotential men jag kan inte se något tydligt själv. Gällande controller-filerna så går det definitivt att förbättra koden. Koden från många routes överlappar mycket och jag hade kunnat lyfta ut många av de delarna till funktioner som jag kallar på. Sen är det många smådelar man inte har så bra koll på så det blir som det blir när man hittar en lösning. När man knappt vet vad en kodrad gör eller hur det fungerar så vill man gärna inte gå in och pilla ifall det fungerar bara för att snygga till det.</p>
            <p>Jag börjar gilla Symfony mer nu. Jag var inne på det i redovisningstexten för förra momentet. Att det känns mest bara knepigt i början och man får mycket mindre nytta av det än vad det ger problem. Men att det är på sikt man börjar tjäna på det och det är nu det börjar svänga över. Jag gillar till exempel hur man länkar en route.</p>
            <p>Mitt TIL för detta moment är vad interface och trait är och vad de används till.</p>
        </div>

        <div id="kmom03"class="content-box report">
            <h2>kmom03</h2>
            <p>Här kommer reodivsningstexten för momentet</p>
        </div>

        <div id="kmom04"class="content-box report">
            <h2>kmom04</h2>
            <p>Här kommer reodivsningstexten för momentet</p>
        </div>

        <div id="kmom05"class="content-box report">
            <h2>kmom05</h2>
            <p>Här kommer reodivsningstexten för momentet</p>
        </div>

        <div id="kmom06"class="content-box report">
            <h2>kmom06</h2>
            <p>Här kommer reodivsningstexten för momentet</p>
        </div>

        <div id="kmom10"class="content-box report">
            <h2>kmom10</h2>
            <p>Här kommer reodivsningstexten för momentet</p>
        </div>
    </div>
{% endblock %}
